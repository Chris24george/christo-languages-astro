---
// src/components/ThemeToggle.astro
---
<script is:inline>
  // This script runs inline in the <head> to set the theme class *before*
  // the page renders to prevent FOUC (flash of unstyled content).
  const getTheme = () => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  };

  const theme = getTheme();

  if (theme === 'light') {
    document.documentElement.classList.remove('dark');
  } else {
    document.documentElement.classList.add('dark');
  }
  // Optional: Store the initial theme determined (useful for the button state)
  // We store it on window because this script runs before the component mounts
  window.initialTheme = theme;
</script>

<button id="theme-toggle" type="button" title="Toggle theme" aria-label="Toggle theme" class="theme-toggle" data-theme="light">
  <svg class="sun w-5 h-5 transition-all duration-300 transform" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg class="moon w-5 h-5 absolute transition-all duration-300 transform" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
  <span class="sr-only">Toggle theme</span>
</button>

<script>
  // This script runs after the page loads and adds the click handler.
  const themeToggle = document.getElementById('theme-toggle');

  // Set initial icon state based on current theme
  function setButtonThemeAttr(theme: string) {
    if (themeToggle) themeToggle.setAttribute('data-theme', theme);
  }

  // On load, set the correct icon
  const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
  setButtonThemeAttr(currentTheme);

  const handleToggle = () => {
    const isDark = document.documentElement.classList.contains('dark');
    const newTheme = isDark ? 'light' : 'dark';
    document.documentElement.classList.toggle('dark');
    localStorage.setItem('theme', newTheme);
    setButtonThemeAttr(newTheme);
  };

  themeToggle?.addEventListener('click', handleToggle);

  // Optional: Clean up the global variable after use
  // Note: If the component framework you use has lifecycle hooks (like mounted),
  // it's often better to handle initial state there instead of window.
  // For simple Astro components, this approach is straightforward.
  // delete window.initialTheme; // Not strictly necessary
</script>

<style>
  .theme-toggle {
    position: relative; /* Needed for absolute positioning of the moon icon */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem; /* p-2 */
    border-radius: 0.375rem; /* rounded-md */
    background-color: transparent;
    border: 1px solid transparent; /* Add a border for focus state */
    color: hsl(var(--foreground)); /* Use theme variable */
    transition: background-color 0.2s, border-color 0.2s;
  }

  .theme-toggle:hover {
    background-color: hsl(var(--muted)); /* Example hover */
  }

  .theme-toggle:focus {
    outline: none;
    box-shadow: 0 0 0 2px hsl(var(--ring), 0.3); /* subtle glow */
    border-color: transparent;
  }

  /* Icons are positioned absolutely on top of each other */
  .theme-toggle .sun {
    opacity: 1;
    transform: rotate(0deg);
  }

  .theme-toggle .moon {
    opacity: 0;
    transform: rotate(90deg);
  }

  .theme-toggle[data-theme="dark"] .sun {
    opacity: 0;
    transform: rotate(-90deg);
  }

  .theme-toggle[data-theme="dark"] .moon {
    opacity: 1;
    transform: rotate(0deg);
  }

  .theme-toggle .sun,
  .theme-toggle .moon {
    transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
  }
</style> 