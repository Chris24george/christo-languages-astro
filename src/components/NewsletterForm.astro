<script src="https://f.convertkit.com/ckjs/ck.5.js"></script>

<div class="newsletter-signup bg-muted text-muted-foreground border border-border py-6 px-4 sm:px-6 rounded-lg">
  <h2 class="text-2xl font-serif font-bold text-primary mb-3 text-center">Learn Languages Like a Polyglot</h2>
  <p class="text-md text-foreground/70 mb-6 text-center">Get the proven, actionable techniques I used to master 10 languages, delivered weekly.</p>

  <form
    action="https://app.kit.com/forms/7984407/subscriptions"
    class="seva-form"
    method="post"
    data-sv-form="7984407"
    data-uid="8a12095aa0"
    data-format="inline"
    data-version="5"
    data-options='{"settings":{"after_subscribe":{"action":"message","success_message":"","redirect_url":""},"analytics":{"google":null,"fathom":null,"facebook":null,"segment":null,"pinterest":null,"sparkloop":null,"googletagmanager":null},"modal":{"trigger":"timer","scroll_percentage":null,"timer":5,"devices":"all","show_once_every":15},"powered_by":{"show":false,"url":"https://kit.com/features/forms?utm_campaign=poweredby&amp;utm_content=form&amp;utm_medium=referral&amp;utm_source=dynamic"},"recaptcha":{"enabled":false},"return_visitor":{"action":"show","custom_content":""},"slide_in":{"display_in":"bottom_right","trigger":"timer","scroll_percentage":null,"timer":5,"devices":"all","show_once_every":15},"sticky_bar":{"display_in":"top","trigger":"timer","scroll_percentage":null,"timer":5,"devices":"all","show_once_every":15}},"version":"5"}'
  >
    <ul data-element="errors" data-group="alert" class="mb-4 text-red-600 list-disc list-inside text-center">
      <!-- Errors will be populated here by ConvertKit -->
    </ul>

    <div data-element="fields" class="flex flex-col sm:flex-row gap-4">
      <label for="ck-email-address" class="sr-only">Email Address</label>
      <input
        id="ck-email-address"
        class="flex-grow p-3 border border-input rounded-md focus:outline-none focus:ring-2 focus:ring-ring bg-background text-foreground"
        name="email_address"
        aria-label="Email Address"
        placeholder="Enter your email"
        required=""
        type="email"
      />
      <button
        data-element="submit"
        class="bg-primary text-primary-foreground font-medium py-3 px-6 rounded-md hover:bg-link-hover transition-colors duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 focus:ring-offset-muted cursor-pointer active:scale-95"
      >
        Subscribe
      </button>
    </div>

    <div data-element="guarantee" class="text-xs text-muted-foreground/80 mt-4 text-center">
      We respect your privacy. Unsubscribe at any time.
    </div>
    <div class="text-center mt-4">
        <a
          href="https://kit.com/features/forms?utm_campaign=poweredby&amp;utm_content=form&amp;utm_medium=referral&amp;utm_source=dynamic"
          data-element="powered-by"
          class="text-xs text-muted-foreground/60 hover:text-muted-foreground/80 transition-colors"
          target="_blank"
          rel="nofollow noopener noreferrer"
          >Built with Kit</a
        >
    </div>
  </form>
</div>

<script>
  const formContainer = document.querySelector<HTMLDivElement>('.newsletter-signup');
  const form = document.querySelector<HTMLFormElement>('.seva-form[data-uid="8a12095aa0"]');
  const heading = formContainer?.querySelector<HTMLHeadingElement>('h2');
  const paragraph = formContainer?.querySelector<HTMLParagraphElement>('p');
  const errorsList = form?.querySelector<HTMLUListElement>('[data-element="errors"]');
  const fieldsDiv = form?.querySelector<HTMLDivElement>('[data-element="fields"]');
  const emailInput = form?.querySelector<HTMLInputElement>('#ck-email-address');
  const submitButton = form?.querySelector<HTMLButtonElement>('[data-element="submit"]');
  const guaranteeText = form?.querySelector<HTMLDivElement>('[data-element="guarantee"]');
  const poweredByLink = form?.querySelector<HTMLAnchorElement>('[data-element="powered-by"]');
  const poweredBy = poweredByLink?.parentElement;

  if (form && heading && paragraph && errorsList && fieldsDiv && emailInput && submitButton && guaranteeText && poweredBy) {
    // Store original button text
    const originalButtonText = submitButton.innerHTML;

    // Elements to hide on success
    const elementsToHide = [heading, paragraph, errorsList, fieldsDiv, guaranteeText, poweredBy];

    // Add transition classes
    elementsToHide.forEach(el => el?.classList.add('transition-opacity', 'duration-300', 'ease-in-out'));

    // Add submit listener for spinner
    form.addEventListener('submit', () => {
      if (!form.checkValidity()) {
        return; // Don't show spinner if form is invalid
      }
      submitButton.disabled = true;
      submitButton.classList.remove('active:scale-95', 'hover:bg-link-hover');
      submitButton.classList.add('cursor-not-allowed', 'opacity-75');
      submitButton.innerHTML = `
        <svg class="animate-spin inline-block h-5 w-5 mr-2 -mt-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Subscribing...
      `;
    });

    form.addEventListener('ckjs:submission:complete', (event) => {
      // Cast event to CustomEvent to access detail
      const customEvent = event as CustomEvent;
      console.log('CKJS Submission Complete:', customEvent.detail);

      // Ensure the main container is still visible, we only hide its children
      if (formContainer) {
        formContainer.style.padding = '0'; // Remove padding from container
        formContainer.style.border = 'none'; // Remove border from container
        formContainer.style.background = 'transparent'; // Make container background transparent
      }

      // Hide form elements with fade out
      elementsToHide.forEach(el => {
        if (el) el.style.opacity = '0';
      });

      // Add a persistent confirmation message outside the form, but inside the container
      if (formContainer) {
          // Check if message already exists to prevent duplicates
          const existingMessage = formContainer.querySelector('.confirmation-message');
          if (!existingMessage) {
              const confirmationMessage = document.createElement('div');
              confirmationMessage.className = 'confirmation-message w-full max-w-md mx-auto p-5 transition-all duration-300 ease-in-out';
              // Set initial styles for animation
              confirmationMessage.style.opacity = '0';
              confirmationMessage.style.transform = 'translateY(10px)';
              confirmationMessage.innerHTML = `
                <div class="flex items-center space-x-4 p-4 bg-primary/10 dark:bg-primary/20 border border-primary/20 rounded-lg">
                  <div class="bg-primary text-primary-foreground rounded-full p-1.5 sm:p-2 flex-shrink-0">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 sm:h-5 sm:w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <h3 class="font-medium text-foreground text-base mb-1">Almost done!</h3>
                    <p class="text-muted-foreground text-sm">Please check your inbox and click the confirmation link to activate your subscription.</p>
                  </div>
                </div>
              `;
              // Clear the container and append only the message
              formContainer.innerHTML = ''; // Remove everything inside
              formContainer.appendChild(confirmationMessage); // Add only the message back
              
              // Add animation to make it appear smoothly
              setTimeout(() => {
                confirmationMessage.style.opacity = '1';
                confirmationMessage.style.transform = 'translateY(0)';
              }, 10);
          }
      }

      // Set display none after transition
      setTimeout(() => {
        elementsToHide.forEach(el => {
            if (el) el.style.display = 'none';
        });
      }, 300); // Match transition duration
    });
  }
</script>
