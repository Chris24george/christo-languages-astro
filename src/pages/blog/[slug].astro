---
import { type CollectionEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import NewsletterHome from '../../components/NewsletterHome.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await post.render();
---

<Layout title={post.data.title} description={post.data.description}>
    <div class="max-w-4xl mx-auto px-4 sm:px-6">
        <article class="mb-16">
            <!-- Article Header -->
            <header class="mb-8 md:mb-10">
                {post.data.tags && (
                    <div class="flex flex-wrap gap-2 mb-4">
                        {post.data.tags.map((tag: string) => (
                            <span class="bg-primary/10 text-primary border border-primary/20 text-xs px-3 py-1 rounded-full">{tag}</span>
                        ))}
                    </div>
                )}
                
                <h1 class="text-3xl sm:text-4xl md:text-5xl font-serif font-bold text-foreground mb-4 md:mb-6 leading-tight">
                    {post.data.title}
                </h1>
                
                <div class="flex items-center text-sm text-foreground/70">
                    <time datetime={post.data.pubDate.toISOString()} class="flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        Published: {post.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                    </time>
                    
                    {post.data.updatedDate && (
                        <time datetime={post.data.updatedDate.toISOString()} class="flex items-center ml-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            Updated: {post.data.updatedDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}
                        </time>
                    )}
                </div>
            </header>
            
            <!-- Table of Contents - auto generated if we want to add later -->
            
            <!-- Article Content -->
            <div class="prose prose-base max-w-none 
                        prose-headings:font-serif prose-headings:text-foreground prose-headings:scroll-mt-20
                        prose-p:text-foreground/90 
                        prose-a:text-primary prose-a:no-underline hover:prose-a:text-primary/80 hover:prose-a:underline
                        prose-strong:text-foreground prose-strong:font-semibold
                        prose-blockquote:border-l-4 prose-blockquote:border-primary/50 prose-blockquote:bg-primary/5 prose-blockquote:py-0.5 prose-blockquote:text-foreground/80 prose-blockquote:not-italic prose-blockquote:pl-4 prose-blockquote:pr-2 prose-blockquote:rounded-r-md
                        prose-code:text-foreground prose-code:bg-muted prose-code:p-1 prose-code:rounded prose-code:font-mono prose-code:text-sm before:prose-code:content-none after:prose-code:content-none
                        prose-pre:bg-[#1c1c2e] prose-pre:shadow-md prose-pre:border prose-pre:border-foreground/10 prose-pre:rounded-xl
                        prose-img:rounded-xl prose-img:shadow-md prose-img:border prose-img:border-border/20
                        prose-li:marker:text-primary prose-li:text-foreground/90">
                <Content />
            </div>

            <div class="mt-10 pt-6 border-t border-border">
                <a href="/blog" class="inline-flex items-center text-sm font-medium text-primary hover:text-primary/80 transition-colors">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M7 16l-4-4m0 0l4-4m-4 4h18" />
                    </svg>
                    Back to blog
                </a>
            </div>
        </article>

        <!-- Newsletter Section -->
        <div class="mt-10 mb-16 bg-card/40 border border-border/40 rounded-2xl p-6 md:p-8">
            <div class="text-center mb-6">
                <h2 class="text-xl md:text-2xl font-serif font-bold text-foreground mb-2">Enjoyed this article?</h2>
                <p class="text-foreground/70 max-w-2xl mx-auto">
                    Subscribe to get new language learning tips and articles delivered straight to your inbox.
                </p>
            </div>
            <NewsletterHome />
        </div>
    </div>
</Layout>

<style>
/* Improve code block styling */
:global(.astro-code) {
    padding: 1.25rem !important;
    border-radius: 0.75rem !important;
    margin: 1.5rem 0 !important;
}

/* Add reading indicator */
.reading-progress {
    position: fixed;
    top: 0;
    left: 0;
    width: 0%;
    height: 3px;
    background-color: hsl(var(--primary));
    z-index: 100;
    transition: width 0.1s ease;
}
</style>

<script>
// Reading progress indicator
document.addEventListener('astro:page-load', () => {
    const readingProgress = document.createElement('div');
    readingProgress.className = 'reading-progress';
    document.body.appendChild(readingProgress);

    window.addEventListener('scroll', () => {
        const article = document.querySelector('article');
        if (!article) return;
        
        const totalHeight = article.clientHeight - window.innerHeight + article.offsetTop;
        const currentProgress = window.scrollY / totalHeight;
        const progressWidth = Math.min(100, Math.max(0, currentProgress * 100));
        
        readingProgress.style.width = `${progressWidth}%`;
    });
});
</script> 